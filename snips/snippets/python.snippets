# Shebang
snippet #!
	#!/usr/bin/env python3
snippet #!2
	#!/usr/bin/env python2
	# -*- coding: utf-8 -*-
snippet #!3
	#!/usr/bin/env python3

# Encodes
snippet cutf8
	# -*- coding: utf-8 -*-
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-

snippet imp
	import ${0:module}
snippet from
	from ${1:package} import ${0:module}

snippet wh
	while ${1}:
		${0}

snippet with
	with ${1:expr} as ${2:var}:
		${0}
snippet awith
	async with ${1:expr} as ${2:var}:
		${0}

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		def __init__(self, ${4:arg}):
			${5:super(${1}, self).__init__()}
			self.${4} = ${4}
			${0}
snippet cla
	class ${1:class_name}:
snippet clai
	class ${1:class_name}:
		def __init__(self, ${3:args}):
			${0}
snippet .
	self.

# New Method
snippet defi
	def __init__(self, ${1:args}):
		${0}
snippet defm
	def ${1:mname}(self, ${2:arg}):
		${0}
snippet adefm
	async def ${1:mname}(self, ${2:arg}):
		${0}

# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
snippet adef
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
snippet adeff
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}

# Ifs
snippet if
	if ${1}:
		${0}
snippet el
	else:
		${0}
snippet ei
	elif ${1}:
		${0}

# For
snippet for
	for ${1:item} in ${2:items}:
		${0}

# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
# __magic__
snippet _
	__${1:init}__

snippet rt
	return
